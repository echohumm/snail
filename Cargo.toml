# TODO: size, compile time, and speed benchmarks to test things like inlining, no inlining, macros instead of fns, etc.

[package]
name = "snailx"
version = "0.6.1"
authors = ["echohumm <echo0humm@gmail.com>"]
# TODO: lower msrv more? will need custom cstr
edition = "2018"
rust-version = "1.56.0"
description = "Zero-allocation, low-overhead access to program arguments (argv) with iterators over `&'static CStr`, `&'static str`, and `&'static OsStr`. Works in no_std (optional std feature) and targets Unix and macOS."
license = "GPL-3 OR MIT"
repository = "https://github.com/echohumm/snail"
# TODO: better keywords/cats
keywords = ["args", "argv", "cli", "zero-allocation", "no_std"]
categories = ["command-line-interface", "no-std::no-alloc"]
readme = "README.md"
build = "build.rs"
exclude = ["/src/main.rs", "/extra/"]

[package.metadata.docs.rs]
all-features = true

[features]
# benchmarking with std
# with str checks
full_pure_bench = ["pure_bench", "std"]
# without str checks
full_opt_bench = ["opt_bench", "std"]
# worst case scenario
full_worst_bench = ["worst_bench", "std"]

# benchmarking without std
pure_bench = ["bench", "no_cold"]
# without str checks
opt_bench = ["pure_bench", "assume_valid_str"]
# worst case scenario
worst_bench = ["bench"]

bench = []

std = []
# removes #[cold] attrs on functions
no_cold = []
# removes utf-8 validity checks when converting &[u8]s to &strs.
# should usually not be used if using str_args, unless you trust your users not to enter dumb stuff
assume_valid_str = []
# switches snailx::CStr::to_stdlib from returning std::ffi::CStr to returning core::ffi::CStr.
# requires rust ver >= 1.64
to_core_cstr = []

# commented out until usage because it's a higher msrv than the crate

#[[bench]]
#name = "stdcmp"
#path = "extra/bench.rs"
#harness = false
#
#[dev-dependencies]
#criterion = "0.7.0"
